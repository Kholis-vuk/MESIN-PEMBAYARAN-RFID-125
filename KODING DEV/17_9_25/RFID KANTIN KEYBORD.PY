#!/usr/bin/env python3
import sys, time, threading, subprocess
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLabel,
    QPushButton, QGridLayout, QMenu, QAction
)
from PyQt5.QtWebEngineWidgets import QWebEngineView
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer, QObject, pyqtSlot, QUrl
from PyQt5.QtWebChannel import QWebChannel
from PyQt5.QtGui import QPainter, QColor
import serial, pyautogui

PORT = "/dev/serial/by-id/usb-Espressif_USB_JTAG_serial_debug_unit_0C:4E:A0:60:02:D8-if00"
BAUD = 115200

# ===== WiFi Monitor =====
class WiFiMonitor(QThread):
    wifi_status_changed = pyqtSignal(str,bool)
    def __init__(self):
        super().__init__()
        self.running=True; self.current_ssid=""; self.current_quality=0
    def get_wifi_info(self):
        try:
            result=subprocess.run(['nmcli','-t','-f','ACTIVE,SSID','dev','wifi'],capture_output=True,text=True)
            for line in result.stdout.strip().split('\n'):
                if line.startswith('yes:'): return line.split(':')[1], True
            return "Not Connected", False
        except: return "Error", False
    def get_wifi_quality(self):
        try:
            result=subprocess.run(['nmcli','-t','-f','ACTIVE,SIGNAL','dev','wifi'],capture_output=True,text=True)
            for line in result.stdout.strip().split('\n'):
                if line.startswith('yes:'): return int(line.split(':')[1])
            return 0
        except: return 0
    def run(self):
        while self.running:
            ssid,connected=self.get_wifi_info()
            quality=self.get_wifi_quality() if connected else 0
            if ssid!=self.current_ssid or connected!=(self.current_quality>0):
                self.wifi_status_changed.emit(ssid,connected)
                self.current_ssid=ssid; self.current_quality=quality if connected else 0
            time.sleep(5)
    def stop(self):
        self.running=False; self.quit(); self.wait()

# ===== WiFi Indicator =====
class WiFiIndicator(QLabel):
    def __init__(self,parent=None):
        super().__init__(parent)
        self.setFixedSize(40,40); self.connected=False; self.quality=0; self.ssid="Not Connected"
        self.setToolTip("Not Connected")
    def update_status(self,ssid,connected,quality=0):
        self.connected=connected; self.quality=quality; self.ssid=ssid
        self.setToolTip(f"{ssid}\nQuality: {quality}%" if connected else "Not Connected")
        self.update()
    def paintEvent(self,event):
        painter=QPainter(self); painter.setRenderHint(QPainter.Antialiasing)
        painter.fillRect(self.rect(),QColor(240,240,240,200))
        if self.connected:
            if self.quality>75: color=QColor(0,200,0)
            elif self.quality>50: color=QColor(255,165,0)
            elif self.quality>25: color=QColor(255,69,0)
            else: color=QColor(255,0,0)
            painter.setPen(Qt.NoPen); painter.setBrush(color)
            cx=self.width()//2; cy=self.height()//2
            painter.drawRect(cx-8,cy+8,4,4)
            if self.quality>25: painter.drawRect(cx-12,cy+4,4,8); painter.drawRect(cx+8,cy+4,4,8)
            if self.quality>50: painter.drawRect(cx-16,cy,4,12); painter.drawRect(cx+12,cy,4,12)
            if self.quality>75: painter.drawRect(cx-20,cy-4,4,16); painter.drawRect(cx+16,cy-4,4,16)
        else:
            painter.setPen(QColor(255,0,0)); painter.setBrush(Qt.NoBrush)
            painter.drawLine(10,10,30,30); painter.drawLine(30,10,10,30)

# ===== Serial Thread =====
class SerialThread(QThread):
    data_received = pyqtSignal(str)

    def __init__(self, port, baud):
        super().__init__()
        self.port = port
        self.baud = baud
        self.ser = None
        self.running = True

    def connect_serial(self):
        """Coba konek ke port serial sampai berhasil."""
        while self.running:
            try:
                self.ser = serial.Serial(self.port, self.baud, timeout=1)
                print("✅ Terkoneksi ke", self.port)
                return
            except Exception as e:
                print("⚠️ Gagal buka port, retry 2 detik...", e)
                time.sleep(2)

    def run(self):
        self.connect_serial()
        while self.running:
            try:
                if self.ser and self.ser.in_waiting > 0:
                    rfid_data = self.ser.readline().decode(errors="ignore").strip()
                    if rfid_data:
                        self.data_received.emit(rfid_data)
            except Exception as e:
                print("⚠️ Serial error, reconnect:", e)
                try:
                    self.ser.close()
                except:
                    pass
                time.sleep(2)
                self.connect_serial()

    def stop(self):
        self.running = False
        if self.ser:
            self.ser.close()
        self.quit()
        self.wait()

# ===== Bridge for WebChannel =====
class Bridge(QObject):
    def __init__(self, parent=None):
        super().__init__()
        self.parent = parent

    @pyqtSlot(str)
    def sendWifiPassword(self, pwd):
        print("Password diterima:", pwd)
        threading.Thread(target=self.parent.run_nmcli_connect,
                         args=(self.parent.current_ssid, pwd),
                         daemon=True).start()

    @pyqtSlot()
    def goHome(self):
        self.parent.keyboard_widget.setVisible(False)
        self.parent.browser.setUrl(QUrl("https://pesatkantin.com/order-self"))

# ===== Main App =====
class WebApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.current_ssid=""
        self.caps_lock=False
        central=QWidget(); self.setCentralWidget(central)
        layout=QVBoxLayout(central); layout.setContentsMargins(0,0,0,0); layout.setSpacing(0)

        # Header
        header=QWidget(); hl=QHBoxLayout(header); hl.setContentsMargins(10,5,10,5)
        title=QLabel("Pesat Kantin - Self Order"); title.setStyleSheet("font-size:16px;font-weight:bold;")
        hl.addWidget(title); hl.addStretch()
        self.wifi_indicator=WiFiIndicator(); self.wifi_indicator.setCursor(Qt.PointingHandCursor)
        self.wifi_indicator.mousePressEvent=self.show_wifi_menu
        hl.addWidget(self.wifi_indicator); layout.addWidget(header)

        # Browser
        self.browser=QWebEngineView(); layout.addWidget(self.browser,stretch=7)
        self.browser.setUrl(QUrl("https://pesatkantin.com/order-self"))

        # Keyboard
        self.keyboard_widget = QWidget()
        self.keyboard_widget.setVisible(False)
        grid = QGridLayout(self.keyboard_widget)
        rows = [
            list("QWERTYUIOP"),
            list("ASDFGHJKL"),
            list("ZXCVBNM"),
            list("1234567890"),
            list("@#%&*()_-+=<>?/")  # karakter tambahan
        ]
        r = 0
        for row in rows:
            c = 0
            for k in row:
                grid.addWidget(self.make_button(k), r, c)
                c += 1
            r += 1
        # Tombol fungsional
        grid.addWidget(self.make_button("CapsLock"), r, 0, 1, 2)
        grid.addWidget(self.make_button("Space"), r, 2, 1, 4)
        grid.addWidget(self.make_button("Backspace"), r, 6, 1, 2)
        grid.addWidget(self.make_button("Enter"), r, 8, 1, 2)
        grid.addWidget(self.make_button("Close"), r, 10, 1, 2)

        self.showFullScreen()

        # Focus timer
        self.focus_timer=QTimer(); self.focus_timer.timeout.connect(self.check_focused_element)
        self.focus_timer.start(500)

        # Serial + WiFi Monitor
        self.serial_thread=SerialThread(PORT,BAUD)
        self.serial_thread.data_received.connect(self.handle_rfid)
        self.serial_thread.start()
        self.wifi_monitor=WiFiMonitor()
        self.wifi_monitor.wifi_status_changed.connect(self.update_wifi_status)
        self.wifi_monitor.start()

        # WebChannel
        self.channel=QWebChannel()
        self.bridge=Bridge(self)
        self.channel.registerObject("pywebchannel",self.bridge)
        self.browser.page().setWebChannel(self.channel)

    # ===== Keyboard =====
    def make_button(self, text):
        btn = QPushButton(text)
        btn.setStyleSheet("font-size:18px;padding:12px;")
        def on_click():
            if text == "CapsLock":
                self.caps_lock = not self.caps_lock
                btn.setStyleSheet(f"font-size:18px;padding:12px; background-color:{'#ADD8E6' if self.caps_lock else 'none'};")
                self.update_keyboard_keys()
            else:
                self.send_key(text)
        btn.clicked.connect(on_click)
        return btn

    def update_keyboard_keys(self):
        for btn in self.keyboard_widget.findChildren(QPushButton):
            text = btn.text()
            if len(text)==1 and text.isalpha():
                btn.setText(text.upper() if self.caps_lock else text.lower())

    def check_focused_element(self):
        js="var f=document.activeElement;if(f&&(f.tagName==='INPUT'||f.tagName==='TEXTAREA')){'input';}else{'none';}"
        self.browser.page().runJavaScript(js,self.handle_focus_check)

    def handle_focus_check(self,res): self.keyboard_widget.setVisible(res=='input')

    def send_key(self, key):
        if key == "Close":
            self.keyboard_widget.setVisible(False)
            self.browser.page().runJavaScript(
                "var f=document.activeElement;if(f&&(f.tagName==='INPUT'||f.tagName==='TEXTAREA')){f.blur();}"
            )
            return
        if key == "Enter":
            js = "var f=document.activeElement;if(f&&(f.tagName==='INPUT'||f.tagName==='TEXTAREA')){var d=new KeyboardEvent('keydown',{key:'Enter',code:'Enter',keyCode:13,which:13,bubbles:true});var u=new KeyboardEvent('keyup',{key:'Enter',code:'Enter',keyCode:13,which:13,bubbles:true});f.dispatchEvent(d);f.dispatchEvent(u);}"
        elif key == "Backspace":
            js = "var f=document.activeElement;if(f&&(f.tagName==='INPUT'||f.tagName==='TEXTAREA')){f.value=f.value.slice(0,-1);f.dispatchEvent(new Event('input',{bubbles:true}));var u=new KeyboardEvent('keyup',{key:'Backspace',code:'Backspace',keyCode:8,which:8,bubbles:true});f.dispatchEvent(u);}"
        elif key == "Space":
            js = "var f=document.activeElement;if(f&&(f.tagName==='INPUT'||f.tagName==='TEXTAREA')){f.value+=' ';f.dispatchEvent(new Event('input',{bubbles:true}));}"
        else:
            if key.isalpha():
                char = key.upper() if self.caps_lock else key.lower()
            else:
                char = key

            js = f"""
            var f=document.activeElement;
            if(f&&(f.tagName==='INPUT'||f.tagName==='TEXTAREA')){{
                f.value+='{char}';
                f.dispatchEvent(new Event('input',{{bubbles:true}}));
                var d = new KeyboardEvent('keydown',{{key:'{char}',code:'{char}',keyCode:{ord(char)},which:{ord(char)},bubbles:true}});
                var u = new KeyboardEvent('keyup',{{key:'{char}',code:'{char}',keyCode:{ord(char)},which:{ord(char)},bubbles:true}});
                f.dispatchEvent(d); f.dispatchEvent(u);
            }}
            """
        self.browser.page().runJavaScript(js)


    # ===== WiFi Menu =====
    def show_wifi_menu(self,event):
        menu=QMenu(self)
        try:
            result=subprocess.run(['nmcli','-t','-f','SSID,SIGNAL,SECURITY','dev','wifi'],capture_output=True,text=True)
            networks=[]
            for line in result.stdout.strip().split('\n'):
                if line:
                    parts=line.split(':'); 
                    if len(parts)>=3: ssid,signal,sec=parts[0],int(parts[1]),':'.join(parts[2:]); networks.append((ssid,signal,sec))
            networks.sort(key=lambda x:x[1],reverse=True)
            for ssid,signal,sec in networks:
                act=QAction(f"{ssid} ({signal}%) - {sec}",self)
                act.triggered.connect(lambda checked,s=ssid:self.open_wifi_html(s))
                menu.addAction(act)
        except Exception as e: act=QAction(f"Error: {e}",self); act.setEnabled(False); menu.addAction(act)
        menu.addSeparator(); refresh=QAction("Refresh Networks",self); refresh.triggered.connect(self.refresh_wifi_networks); menu.addAction(refresh)
        menu.exec_(self.mapToGlobal(self.wifi_indicator.geometry().bottomRight()))

    def open_wifi_html(self, ssid):
        self.current_ssid = ssid
        self.keyboard_widget.setVisible(True)
        html = f"""
        <!DOCTYPE html>
        <html>
        <head>
        <meta charset="UTF-8">
        <title>WiFi Password</title>
        <script src="qrc:///qtwebchannel/qwebchannel.js"></script>
        <script>
        function setupChannel() {{
            new QWebChannel(qt.webChannelTransport, function(channel) {{
                window.pywebchannel = channel.objects.pywebchannel;
            }});
        }}
        function connectWifi() {{
            var pwd = document.getElementById('wifiPwd').value;
            if(window.pywebchannel) {{ window.pywebchannel.sendWifiPassword(pwd); }}
            else {{ alert("WebChannel belum siap, coba lagi sebentar."); }}
        }}
        function goHome() {{
            if(window.pywebchannel) {{ window.pywebchannel.goHome(); }}
        }}
        </script>
        </head>
        <body onload="setupChannel()">
        <h3>Masukkan Password WiFi untuk {ssid}</h3>
        <input type="text" id="wifiPwd" placeholder="Password">
        <button onclick="connectWifi()">Connect</button>
        <button onclick="goHome()">Home</button>
        </body>
        </html>
        """
        self.browser.setHtml(html)
        self.browser.page().runJavaScript("""
            new QWebChannel(qt.webChannelTransport, function(channel) {
                window.pywebchannel = channel.objects.pywebchannel;
            });
        """)

    def run_nmcli_connect(self,ssid,password):
        try:
            result=subprocess.run(['nmcli','dev','wifi','connect',ssid,'password',password],capture_output=True,text=True)
            if result.returncode==0: print(f"✅ Terhubung ke {ssid}")
            else: print(f"❌ Gagal terhubung ke {ssid}")
        except Exception as e: print("❌ Error:",e)

    def refresh_wifi_networks(self):
        try: subprocess.run(['nmcli','dev','wifi','rescan'],capture_output=True,timeout=10)
        except Exception as e: print("Error refreshing WiFi:",e)

    def update_wifi_status(self,ssid,connected):
        quality=self.wifi_monitor.get_wifi_quality() if connected else 0
        self.wifi_indicator.update_status(ssid,connected,quality)

    # ===== RFID =====
    def handle_rfid(self, rfid_data):
        print("📡 Dari ESP32 (RFID):", rfid_data, flush=True)
        
        # Approach sederhana seperti kode yang bekerja
        try:
            self.browser.activateWindow()
            self.browser.setFocus()
            time.sleep(0.1)  # Sedikit lebih lama dari 0.06 tapi tidak berlebihi
            
            # Gunakan pyautogui langsung
            pyautogui.typewrite(rfid_data)
            time.sleep(0.05)
            pyautogui.press("enter")
            print("✅ RFID berhasil diinput")
            
        except Exception as e:
            print("❌ Error:", e)
            # Fallback ke JavaScript hanya jika benar-benar perlu
            self.fallback_rfid_javascript(rfid_data)


    def closeEvent(self,event):
        self.serial_thread.stop(); self.focus_timer.stop(); self.wifi_monitor.stop(); event.accept()

# ===== Run =====
if __name__=="__main__":
    app=QApplication(sys.argv)
    window=WebApp()
    sys.exit(app.exec_())
